<launch>

  <remap from="mobile_base_controller/cmd_vel" to="cmd_vel" />
  <remap from="mobile_base_controller/odom"    to="odom" />
  
  <param name="use_sim_time" type="bool" value="true"/>
  <arg name="gazebo" default="true"/>
  <arg name="rviz" default="true"/>
  
  <!-- gazebo configuration parameters -->
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="physics" default="ode"/>
  <arg name="verbose" default="false"/>
  <arg name="extra_gazebo_args" default=""/>

  
  <arg name="arm" default="true"/>
  <arg name="base" default="true"/>
  <arg name="realsense" default="false"/>
  <arg name="use_nav_controllers" default="true"/>
  <arg name="prefix" default=""/>
  
  
  <!-- Internal arguments, rewrite human-readable gazebo arguments to it's internal arguments -->
  <arg unless="$(arg paused)" name="command_arg1" value=""/>
  <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
  <arg unless="$(arg headless)" name="command_arg2" value=""/>
  <arg     if="$(arg headless)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg     if="$(arg debug)" name="script_type" value="debug"/> 



  <include file="$(find mir_gazebo)/launch/includes/spawn_maze.launch.xml" />
  
  <!-- from where the simulation enviornment will be loaded:
       WARNING: exactly one parameter has to be true, otherwise simulation behaviour is undefined -->
  <arg name="world_name" default="$(find relax_gazebo)/worlds/relax.world"/>  
  
  <!-- Load the URDF/SRDF into the ROS Parameter Server -->
  <param name="robot_description"
         command="$(find xacro)/xacro $(find relax_urdf)/urdf/relax_robot.urdf.xacro arm:=$(arg arm) base:=$(arg base) realsense:=$(arg realsense) floating_joint:=false use_nav_controllers:=$(arg use_nav_controllers)"/>
  
  <!-- run gazebo -->
  <group if="$(arg gazebo)">
  <!-- start gazebo server-->
  	<node name="gazebo" 
          pkg="gazebo_ros" 
          type="$(arg script_type)" 
          respawn="false" 
          output="screen"
		      args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name) -namespace relax" />

  	<!-- start gazebo client -->
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen" if="$(arg gui)"/>

  	<!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
	  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
		      args="-urdf -model relax -param robot_description"/>
  </group>


  <remap from="joint_states"                   to="mir/joint_states" />

   <!-- Load ros_control controller configurations -->
  <rosparam file="$(find mir_description)/config/joint_state_controller.yaml" command="load" />
  <rosparam file="$(find mir_description)/config/diffdrive_controller.yaml" command="load" subst_value="true" />

  <!-- Start the controllers -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen"
    args="joint_state_controller mobile_base_controller"/>

  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <rosparam param="source_list">[mir/joint_states]</rosparam>
    <param name="rate" value="200.0" />
  </node>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
			<param name="publish_frequency" type="double" value="250.0"/>
  </node>

   <!-- create combined scan topic (like on real MiR) -->
  <node pkg="topic_tools" type="relay" name="b_scan_relay" args="b_scan scan"/>
  <node pkg="topic_tools" type="relay" name="f_scan_relay" args="f_scan scan"/>

  <node name="b_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
    <remap from="scan" to="b_scan" />
    <remap from="scan_filtered" to="b_scan_rep117" />
  </node>

  <node name="f_rep117_laser_filter" pkg="mir_driver" type="rep117_filter.py" output="screen">
    <remap from="scan" to="f_scan" />
    <remap from="scan_filtered" to="f_scan_rep117" />
  </node>

  <!-- EKF -->
  <include file="$(find mir_gazebo)/launch/includes/ekf.launch.xml">
      <arg name="tf_prefix" value="$(arg prefix)" />
  </include>

</launch>
